{"version":3,"file":"component---src-pages-guides-examples-instance-md-585f0a02e5832447b843.js","mappings":"mTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,aAAW,cAEnBA,EAAAA,EAAAA,KAAA,MACE,GAAM,uHAAqH,wHAE7HA,EAAAA,EAAAA,KAAA,kCACAA,EAAAA,EAAAA,KAAA,mBACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,kBACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,kCACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,0CACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,4BAGvBH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,+jLA+GtC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/examples/instance.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/designer-python-api/designer-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"instances\"\n    }}>{`Instances`}</h1>\n    <h2 {...{\n      \"id\": \"this-sample-shows-how-to-instanciate-a-substance-compositing-graph-in-another-and-also-how-to-setup-a-gradient-node\"\n    }}>{`This sample shows how to instanciate a Substance Compositing graph in another and also how to setup a gradient node`}</h2>\n    <p>{`To use this example:`}</p>\n    <blockquote>\n      <ol parentName=\"blockquote\">\n        <li parentName=\"ol\">{`Open Designer`}</li>\n        <li parentName=\"ol\">{`Go to Windows > Python Editor`}</li>\n        <li parentName=\"ol\">{`Copy the code below inside the editor`}</li>\n        <li parentName=\"ol\">{`Press the Play button`}</li>\n      </ol>\n    </blockquote>\n    <hr></hr>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import os\nimport sd\nfrom sd.tools import io\nfrom sd.api.sdapplication import *\nfrom sd.ui.graphgrid import *\nfrom sd.api.sbs.sdsbscompgraph import *\nfrom sd.api.sdvaluecolorrgba import *\nfrom sd.api.sdvalueusage import *\nfrom sd.api.sdvaluearray import *\nfrom sd.api.sdvaluestruct import *\nfrom sd.api.sdvaluefloat import *\nfrom sd.api.sdvalueint import *\n\nfrom sd.api.sdtypeusage import *\nfrom sd.api.sdresourcebitmap import *\nfrom sd.api.sdtypestruct import *\n\ndef main(aSDContext):\n    cGridSize = GraphGrid.sGetFirstLevelSize()\n    sbsPackageName = \"MySample\"  # Get the package name from the current python file base name\n\n    # =========================================================================\n    # Create a new Package\n    sdApplication = aSDContext.getSDApplication()\n    sdPackageMgr = sdApplication.getPackageMgr()\n    sdPackage = sdPackageMgr.newUserPackage()\n\n    # =========================================================================\n    # Create a new Substance Compositing Graph in this package\n    sdSBSCompGraph = SDSBSCompGraph.sNew(sdPackage)\n\n    #   - Set the graph identifier\n    sdSBSCompGraph.setIdentifier(sbsPackageName)\n\n\n    # =========================================================================\n    # Create output Node BaseColor\n    sdSBSCompNodeOutputBaseColor = sdSBSCompGraph.newNode('sbs::compositing::output')\n    sdSBSCompNodeOutputBaseColor.setPosition(float2(0, -cGridSize))\n    sdValueArray = SDValueArray.sNew(SDTypeUsage.sNew(), 0)\n    sdValueArray.pushBack(SDValueUsage.sNew(SDUsage.sNew('baseColor', 'RGBA', 'sRGB')))\n    sdSBSCompNodeOutputBaseColor.setAnnotationPropertyValueFromId('usages', sdValueArray)\n\n    # Create output Node Normal\n    sdSBSCompNodeOutputNormal = sdSBSCompGraph.newNode('sbs::compositing::output')\n    sdSBSCompNodeOutputNormal.setPosition(float2(0, cGridSize))\n    sdValueArray = SDValueArray.sNew(SDTypeUsage.sNew(), 0)\n    sdValueArray.pushBack(SDValueUsage.sNew(SDUsage.sNew('normal', 'RGBA', 'sRGB')))\n    sdSBSCompNodeOutputNormal.setAnnotationPropertyValueFromId('usages', sdValueArray)\n\n    # =========================================================================\n    sdSBSCompNodeGradient = sdSBSCompGraph.newNode('sbs::compositing::gradient')\n    sdSBSCompNodeGradient.setPosition(float2(-2*cGridSize, -cGridSize))\n\n    sdTypeStructGradientKeyRGBAStructType = SDTypeStruct.sNew('sbs::compositing::gradient_key_rgba')\n    # Create key 0 to Red\n    sdValueStructKey0 = SDValueStruct.sNew(sdTypeStructGradientKeyRGBAStructType)\n    sdValueStructKey0.setPropertyValueFromId('value', SDValueColorRGBA.sNew(ColorRGBA(1, 0, 0, 1)))\n    sdValueStructKey0.setPropertyValueFromId('position', SDValueFloat.sNew(0))\n    sdValueStructKey0.setPropertyValueFromId('midpoint', SDValueFloat.sNew(0.5))\n\n    # Create key 1 to Green\n    sdValueStructKey1 = SDValueStruct.sNew(sdTypeStructGradientKeyRGBAStructType)\n    sdValueStructKey1.setPropertyValueFromId('value', SDValueColorRGBA.sNew(ColorRGBA(0, 1, 0, 1)))\n    sdValueStructKey1.setPropertyValueFromId('position', SDValueFloat.sNew(0.5))\n    sdValueStructKey1.setPropertyValueFromId('midpoint', SDValueFloat.sNew(0.5))\n\n    # Create key 2 to Blue\n    sdValueStructKey2 = SDValueStruct.sNew(sdTypeStructGradientKeyRGBAStructType)\n    sdValueStructKey2.setPropertyValueFromId('value', SDValueColorRGBA.sNew(ColorRGBA(0, 0, 1, 1)))\n    sdValueStructKey2.setPropertyValueFromId('position', SDValueFloat.sNew(1))\n    sdValueStructKey2.setPropertyValueFromId('midpoint', SDValueFloat.sNew(0.5))\n\n    # Create array of keys\n    sdValueArray = SDValueArray.sNew(sdTypeStructGradientKeyRGBAStructType, 0)\n    sdValueArray.pushBack(sdValueStructKey0)\n    sdValueArray.pushBack(sdValueStructKey1)\n    sdValueArray.pushBack(sdValueStructKey2)\n\n    # Set the key array to the node property\n    sdSBSCompNodeGradient.setInputPropertyValueFromId('gradientrgba', sdValueArray)\n    sdSBSCompNodeGradient.newPropertyConnectionFromId('unique_filter_output', sdSBSCompNodeOutputBaseColor, 'inputNodeOutput')\n\n    # =========================================================================\n    sdSBSCompNodeNormal = sdSBSCompGraph.newNode('sbs::compositing::normal')\n    sdSBSCompNodeNormal.setPosition(float2(-2*cGridSize, cGridSize))\n    sdSBSCompNodeNormal.newPropertyConnectionFromId('unique_filter_output', sdSBSCompNodeOutputNormal, 'inputNodeOutput')\n\n    # =========================================================================\n    resourcePath = sdApplication.getPath(SDApplicationPath.DefaultResourcesDir)\n    sdPackageAlveolus = sdPackageMgr.loadUserPackage(os.path.join(resourcePath, 'packages', 'pattern_alveolus.sbs'), True)\n    sdSBSCompNodeInstanceAlveolus = sdSBSCompGraph.newInstanceNode(sdPackageAlveolus.findResourceFromUrl('alveolus'))\n    sdSBSCompNodeInstanceAlveolus.setPosition(float2(-4*cGridSize, 0))\n    sdSBSCompNodeInstanceAlveolus.setInputPropertyValueFromId('Tiling', SDValueInt.sNew(5))\n    sdSBSCompNodeInstanceAlveolusFirstOutputProperty = sdSBSCompNodeInstanceAlveolus.getProperties(SDPropertyCategory.Output)[0]\n    sdSBSCompNodeInstanceAlveolusFirstOutputPropertyId = sdSBSCompNodeInstanceAlveolusFirstOutputProperty.getId()\n    sdSBSCompNodeInstanceAlveolus.newPropertyConnectionFromId(\n        sdSBSCompNodeInstanceAlveolusFirstOutputPropertyId,\n        sdSBSCompNodeGradient,\n        'input1')\n    sdSBSCompNodeInstanceAlveolus.newPropertyConnectionFromId(\n        sdSBSCompNodeInstanceAlveolusFirstOutputPropertyId,\n        sdSBSCompNodeNormal,\n        'input1')\n\nif __name__ == '__main__':\n    main(sd.getContext())\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}