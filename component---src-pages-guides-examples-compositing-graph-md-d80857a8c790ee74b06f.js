"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[611],{78244:function(e,o,t){t.r(o),t.d(o,{_frontmatter:function(){return d},default:function(){return m}});var n=t(87462),r=t(63366),i=(t(15007),t(64983)),a=t(91515),s=["components"],d={},p={_frontmatter:d},u=a.Z;function m(e){var o=e.components,t=(0,r.Z)(e,s);return(0,i.mdx)(u,(0,n.Z)({},p,t,{components:o,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"substance-compositing-graph-creation"},"Substance compositing graph creation"),(0,i.mdx)("p",null,"This sample shows how to create a simple Substance Compositing Graph that uses:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"two Uniform Colors Nodes"),(0,i.mdx)("li",{parentName:"ul"},"a Noise Node"),(0,i.mdx)("li",{parentName:"ul"},"a Blend Node"),(0,i.mdx)("li",{parentName:"ul"},"an Output Node")),(0,i.mdx)("hr",null),(0,i.mdx)("p",null,"To use this example:"),(0,i.mdx)("blockquote",null,(0,i.mdx)("ol",{parentName:"blockquote"},(0,i.mdx)("li",{parentName:"ol"},"Open Designer"),(0,i.mdx)("li",{parentName:"ol"},"Go to Windows > Python Editor"),(0,i.mdx)("li",{parentName:"ol"},"Copy the code below inside the editor"),(0,i.mdx)("li",{parentName:"ol"},"Press the Play button"))),(0,i.mdx)("hr",null),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-python"},"import os\nimport sd\nfrom sd.tools import io\nfrom sd.api.sdapplication import *\nfrom sd.ui.graphgrid import *\nfrom sd.api.sbs.sdsbscompgraph import *\nfrom sd.api.sdvaluecolorrgba import *\nfrom sd.api.sdvalueusage import *\nfrom sd.api.sdvaluearray import *\nfrom sd.api.sdvaluestruct import *\nfrom sd.api.sdvaluefloat import *\nfrom sd.api.sdvalueint import *\n\nfrom sd.api.sdtypeusage import *\nfrom sd.api.sdresourcebitmap import *\nfrom sd.api.sdtypestruct import *\ndef main(aSDContext):\n  \n    cGridSize = GraphGrid.sGetFirstLevelSize()\n    sbsPackageName = \"MySample\"\n\n    # =========================================================================\n    # Create a new Package\n    sdPackageMgr = aSDContext.getSDApplication().getPackageMgr()\n    sdPackage = sdPackageMgr.newUserPackage()\n\n    # =========================================================================\n    # Create a new Substance Compositing Graph in this package\n    sdSBSCompGraph = SDSBSCompGraph.sNew(sdPackage)\n\n    #   - Set the graph identifier\n    sdSBSCompGraph.setIdentifier(sbsPackageName)\n\n    # =========================================================================\n    # Create a uniform color node\n    sdSBSCompNodeUniform1 = sdSBSCompGraph.newNode('sbs::compositing::uniform')\n\n    #   - Set the position of the uniform node\n    sdSBSCompNodeUniform1.setPosition(float2(-2*cGridSize, -2*cGridSize))\n\n    #   - Set the inheritance mode of the '$format' property to absolute\n    sdSBSCompNodeUniform1.setInputPropertyInheritanceMethodFromId('$format', SDPropertyInheritanceMethod.Absolute)\n\n    #   - Change the Output format of the '$format' property to 'hdr_high_precision'\n    sdSBSCompNodeUniform1.setInputPropertyValueFromId('$format', SDValueEnum.sFromValueId('sbs::compositing::format', 'hdr_high_precision'))\n\n    #   - Change the color property of this node\n    #       - Create the value color. The SDValueColorRGBA embeds the base type value of type ColorRGBA\n    sdValueColorRGBA = SDValueColorRGBA.sNew(ColorRGBA(0.8, 0.35, 0.0, 1.0))\n    #       - Set the color value to the 'outputcolor' input property of the node\n    sdSBSCompNodeUniform1.setInputPropertyValueFromId('outputcolor', sdValueColorRGBA)\n    \n     \n     # =========================================================================\n    # Create a second uniform color node\n    sdSBSCompNodeUniform2 = sdSBSCompGraph.newNode('sbs::compositing::uniform')\n\n    #   - Set the position of the uniform node\n    sdSBSCompNodeUniform2.setPosition(float2(-2*cGridSize, 0))\n\n    #   - Set the inheritance mode of the '$format' property to absolute\n    sdSBSCompNodeUniform2.setInputPropertyInheritanceMethodFromId('$format', SDPropertyInheritanceMethod.Absolute)\n\n    #   - Change the Output format of the '$format' property to 'hdr_high_precision'\n    sdSBSCompNodeUniform2.setInputPropertyValueFromId('$format', SDValueEnum.sFromValueId('sbs::compositing::format', 'hdr_high_precision'))\n\n    #   - Change the color property of this node\n    #       - Create the value color. The SDValueColorRGBA embeds the base type value of type ColorRGBA\n    sdValueColorRGBA = SDValueColorRGBA.sNew(ColorRGBA(0.8, 0.8, 0.0, 1.0))\n    #       - Set the color value to the 'outputcolor' input property of the node\n    sdSBSCompNodeUniform2.setInputPropertyValueFromId('outputcolor', sdValueColorRGBA)\n    \n    # =========================================================================\n    # Create a noise node\n    resourcePath = aSDContext.getSDApplication().getPath(SDApplicationPath.DefaultResourcesDir)\n    sdPackageNoise = sdPackageMgr.loadUserPackage(os.path.join(resourcePath, 'packages', 'grunge_rust_fine.sbs'), True)\n    sdSBSCompNodeNoise = sdSBSCompGraph.newInstanceNode(sdPackageNoise.findResourceFromUrl('grunge_rust_fine'))\n    #   - Set the position of the noise node\n    sdSBSCompNodeNoise.setPosition(float2(-2*cGridSize, 2*cGridSize))\n\n   \n    # =========================================================================\n    # Create a blend Node\n    sdSBSCompNodeBlend = sdSBSCompGraph.newNode('sbs::compositing::blend')\n    #   - Set the position of the blend node\n    sdSBSCompNodeBlend.setPosition(float2(0, 0))\n\n    # =========================================================================\n    # Create an output Node\n    sdSBSCompNodeOutput = sdSBSCompGraph.newNode('sbs::compositing::output')\n    #   - Set the position of the output node\n    sdSBSCompNodeOutput.setPosition(float2(2*cGridSize, 0))\n    #   - Add one usage 'baseColor' to the output node\n    #       The usages of an output (or input node) are define from/to an array.\n    #       - Create an array value of usages (of undefined size)\n    sdValueArray = SDValueArray.sNew(SDTypeUsage.sNew(), 0)\n    #       - Create an usage value that embed the usage to add to the node\n    sdValueUsage = SDValueUsage.sNew(SDUsage.sNew('baseColor', 'RGBA', 'sRGB'))\n    #       - Add the usage value to the array\n    sdValueArray.pushBack(sdValueUsage)\n    #       - Set the value array to the 'usages' annotation of the output node\n    sdSBSCompNodeOutput.setAnnotationPropertyValueFromId('usages', sdValueArray)\n\n    # =========================================================================\n    # Create connections\n    #   - Connect the first uniform node to the Blend node\n    #       - 'unique_filter_output': The identifier of the output property of the Uniform Node.\n    #           This property is Connectable (i.e. SDProperty.isConnectable() is True), it means that a Connector is displayed for this property in the graph,\n    #           and a connection can be defined from/to this property.\n    #       - 'sdSBSCompNodeBlend': This is the other Node to connect\n    #       - 'source': This is the input property of the other Node\n    sdSBSCompNodeUniform1.newPropertyConnectionFromId('unique_filter_output', sdSBSCompNodeBlend, 'source')\n\n    #   - Connect the second Uniform node to the Blend node\n    #       - 'unique_filter_output': The identifier of the output property of the Uniform Node.\n    #           This property is Connectable (i.e. SDProperty.isConnectable() is True), it means that a Connector is displayed for this property in the graph,\n    #           and a connection can be defined from/to this property.\n    #       - 'sdSBSCompNodeBlend': This is the other Node to connect\n    #       - 'destination': This is the input property of the other Node\n    sdSBSCompNodeUniform2.newPropertyConnectionFromId('unique_filter_output', sdSBSCompNodeBlend, 'destination')\n    \n        #   - Connect the Noise node to the Blend node\n    #       - 'output': The identifier of the output property of the Node.\n    #           This property is Connectable (i.e. SDProperty.isConnectable() is True), it means that a Connector is displayed for this property in the graph,\n    #           and a connection can be defined from/to this property.\n    #       - 'sdSBSCompNodeBlend': This is the other Node to connect\n    #       - 'opacity': This is the input property of the other Node\n    sdSBSCompNodeNoise.newPropertyConnectionFromId('output', sdSBSCompNodeBlend, 'opacity')\n\n    #   - Connect the Blend node to the output node\n    #       - 'unique_filter_output': The identifier of the output property of the Blend Node.\n    #           This property is Connectable (i.e. SDProperty.isConnectable() is True), it means that a Connector is displayed for this property in the graph,\n    #           and a connection can be defined from/to this property.\n    #       - 'sdSBSCompNodeOutput': This is the other Node to connect\n    #       - 'inputNodeOutput': This is the input property of the other Node\n    sdSBSCompNodeBlend.newPropertyConnectionFromId('unique_filter_output', sdSBSCompNodeOutput, 'inputNodeOutput')\n\nif __name__ == '__main__':\n    main(sd.getContext())\n")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-examples-compositing-graph-md-d80857a8c790ee74b06f.js.map