{"version":3,"file":"component---src-pages-guides-examples-compositing-graph-md-d80857a8c790ee74b06f.js","mappings":"mTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,wCAAsC,yCAE9CA,EAAAA,EAAAA,KAAA,6FACAA,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,6BACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,iBACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,iBACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,oBAErBH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,kCACAA,EAAAA,EAAAA,KAAA,mBACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,eACbH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,kBACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,kCACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,0CACnBH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,4BAGvBH,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,MAClB,UAAa,mBAAiB,ixPA+ItC,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/guides/examples/compositing_graph.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/designer-python-api/designer-python-api/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"substance-compositing-graph-creation\"\n    }}>{`Substance compositing graph creation`}</h1>\n    <p>{`This sample shows how to create a simple Substance Compositing Graph that uses:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`two Uniform Colors Nodes`}</li>\n      <li parentName=\"ul\">{`a Noise Node`}</li>\n      <li parentName=\"ul\">{`a Blend Node`}</li>\n      <li parentName=\"ul\">{`an Output Node`}</li>\n    </ul>\n    <hr></hr>\n    <p>{`To use this example:`}</p>\n    <blockquote>\n      <ol parentName=\"blockquote\">\n        <li parentName=\"ol\">{`Open Designer`}</li>\n        <li parentName=\"ol\">{`Go to Windows > Python Editor`}</li>\n        <li parentName=\"ol\">{`Copy the code below inside the editor`}</li>\n        <li parentName=\"ol\">{`Press the Play button`}</li>\n      </ol>\n    </blockquote>\n    <hr></hr>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-python\"\n      }}>{`import os\nimport sd\nfrom sd.tools import io\nfrom sd.api.sdapplication import *\nfrom sd.ui.graphgrid import *\nfrom sd.api.sbs.sdsbscompgraph import *\nfrom sd.api.sdvaluecolorrgba import *\nfrom sd.api.sdvalueusage import *\nfrom sd.api.sdvaluearray import *\nfrom sd.api.sdvaluestruct import *\nfrom sd.api.sdvaluefloat import *\nfrom sd.api.sdvalueint import *\n\nfrom sd.api.sdtypeusage import *\nfrom sd.api.sdresourcebitmap import *\nfrom sd.api.sdtypestruct import *\ndef main(aSDContext):\n  \n    cGridSize = GraphGrid.sGetFirstLevelSize()\n    sbsPackageName = \"MySample\"\n\n    # =========================================================================\n    # Create a new Package\n    sdPackageMgr = aSDContext.getSDApplication().getPackageMgr()\n    sdPackage = sdPackageMgr.newUserPackage()\n\n    # =========================================================================\n    # Create a new Substance Compositing Graph in this package\n    sdSBSCompGraph = SDSBSCompGraph.sNew(sdPackage)\n\n    #   - Set the graph identifier\n    sdSBSCompGraph.setIdentifier(sbsPackageName)\n\n    # =========================================================================\n    # Create a uniform color node\n    sdSBSCompNodeUniform1 = sdSBSCompGraph.newNode('sbs::compositing::uniform')\n\n    #   - Set the position of the uniform node\n    sdSBSCompNodeUniform1.setPosition(float2(-2*cGridSize, -2*cGridSize))\n\n    #   - Set the inheritance mode of the '$format' property to absolute\n    sdSBSCompNodeUniform1.setInputPropertyInheritanceMethodFromId('$format', SDPropertyInheritanceMethod.Absolute)\n\n    #   - Change the Output format of the '$format' property to 'hdr_high_precision'\n    sdSBSCompNodeUniform1.setInputPropertyValueFromId('$format', SDValueEnum.sFromValueId('sbs::compositing::format', 'hdr_high_precision'))\n\n    #   - Change the color property of this node\n    #       - Create the value color. The SDValueColorRGBA embeds the base type value of type ColorRGBA\n    sdValueColorRGBA = SDValueColorRGBA.sNew(ColorRGBA(0.8, 0.35, 0.0, 1.0))\n    #       - Set the color value to the 'outputcolor' input property of the node\n    sdSBSCompNodeUniform1.setInputPropertyValueFromId('outputcolor', sdValueColorRGBA)\n    \n     \n     # =========================================================================\n    # Create a second uniform color node\n    sdSBSCompNodeUniform2 = sdSBSCompGraph.newNode('sbs::compositing::uniform')\n\n    #   - Set the position of the uniform node\n    sdSBSCompNodeUniform2.setPosition(float2(-2*cGridSize, 0))\n\n    #   - Set the inheritance mode of the '$format' property to absolute\n    sdSBSCompNodeUniform2.setInputPropertyInheritanceMethodFromId('$format', SDPropertyInheritanceMethod.Absolute)\n\n    #   - Change the Output format of the '$format' property to 'hdr_high_precision'\n    sdSBSCompNodeUniform2.setInputPropertyValueFromId('$format', SDValueEnum.sFromValueId('sbs::compositing::format', 'hdr_high_precision'))\n\n    #   - Change the color property of this node\n    #       - Create the value color. The SDValueColorRGBA embeds the base type value of type ColorRGBA\n    sdValueColorRGBA = SDValueColorRGBA.sNew(ColorRGBA(0.8, 0.8, 0.0, 1.0))\n    #       - Set the color value to the 'outputcolor' input property of the node\n    sdSBSCompNodeUniform2.setInputPropertyValueFromId('outputcolor', sdValueColorRGBA)\n    \n    # =========================================================================\n    # Create a noise node\n    resourcePath = aSDContext.getSDApplication().getPath(SDApplicationPath.DefaultResourcesDir)\n    sdPackageNoise = sdPackageMgr.loadUserPackage(os.path.join(resourcePath, 'packages', 'grunge_rust_fine.sbs'), True)\n    sdSBSCompNodeNoise = sdSBSCompGraph.newInstanceNode(sdPackageNoise.findResourceFromUrl('grunge_rust_fine'))\n    #   - Set the position of the noise node\n    sdSBSCompNodeNoise.setPosition(float2(-2*cGridSize, 2*cGridSize))\n\n   \n    # =========================================================================\n    # Create a blend Node\n    sdSBSCompNodeBlend = sdSBSCompGraph.newNode('sbs::compositing::blend')\n    #   - Set the position of the blend node\n    sdSBSCompNodeBlend.setPosition(float2(0, 0))\n\n    # =========================================================================\n    # Create an output Node\n    sdSBSCompNodeOutput = sdSBSCompGraph.newNode('sbs::compositing::output')\n    #   - Set the position of the output node\n    sdSBSCompNodeOutput.setPosition(float2(2*cGridSize, 0))\n    #   - Add one usage 'baseColor' to the output node\n    #       The usages of an output (or input node) are define from/to an array.\n    #       - Create an array value of usages (of undefined size)\n    sdValueArray = SDValueArray.sNew(SDTypeUsage.sNew(), 0)\n    #       - Create an usage value that embed the usage to add to the node\n    sdValueUsage = SDValueUsage.sNew(SDUsage.sNew('baseColor', 'RGBA', 'sRGB'))\n    #       - Add the usage value to the array\n    sdValueArray.pushBack(sdValueUsage)\n    #       - Set the value array to the 'usages' annotation of the output node\n    sdSBSCompNodeOutput.setAnnotationPropertyValueFromId('usages', sdValueArray)\n\n    # =========================================================================\n    # Create connections\n    #   - Connect the first uniform node to the Blend node\n    #       - 'unique_filter_output': The identifier of the output property of the Uniform Node.\n    #           This property is Connectable (i.e. SDProperty.isConnectable() is True), it means that a Connector is displayed for this property in the graph,\n    #           and a connection can be defined from/to this property.\n    #       - 'sdSBSCompNodeBlend': This is the other Node to connect\n    #       - 'source': This is the input property of the other Node\n    sdSBSCompNodeUniform1.newPropertyConnectionFromId('unique_filter_output', sdSBSCompNodeBlend, 'source')\n\n    #   - Connect the second Uniform node to the Blend node\n    #       - 'unique_filter_output': The identifier of the output property of the Uniform Node.\n    #           This property is Connectable (i.e. SDProperty.isConnectable() is True), it means that a Connector is displayed for this property in the graph,\n    #           and a connection can be defined from/to this property.\n    #       - 'sdSBSCompNodeBlend': This is the other Node to connect\n    #       - 'destination': This is the input property of the other Node\n    sdSBSCompNodeUniform2.newPropertyConnectionFromId('unique_filter_output', sdSBSCompNodeBlend, 'destination')\n    \n        #   - Connect the Noise node to the Blend node\n    #       - 'output': The identifier of the output property of the Node.\n    #           This property is Connectable (i.e. SDProperty.isConnectable() is True), it means that a Connector is displayed for this property in the graph,\n    #           and a connection can be defined from/to this property.\n    #       - 'sdSBSCompNodeBlend': This is the other Node to connect\n    #       - 'opacity': This is the input property of the other Node\n    sdSBSCompNodeNoise.newPropertyConnectionFromId('output', sdSBSCompNodeBlend, 'opacity')\n\n    #   - Connect the Blend node to the output node\n    #       - 'unique_filter_output': The identifier of the output property of the Blend Node.\n    #           This property is Connectable (i.e. SDProperty.isConnectable() is True), it means that a Connector is displayed for this property in the graph,\n    #           and a connection can be defined from/to this property.\n    #       - 'sdSBSCompNodeOutput': This is the other Node to connect\n    #       - 'inputNodeOutput': This is the input property of the other Node\n    sdSBSCompNodeBlend.newPropertyConnectionFromId('unique_filter_output', sdSBSCompNodeOutput, 'inputNodeOutput')\n\nif __name__ == '__main__':\n    main(sd.getContext())\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}