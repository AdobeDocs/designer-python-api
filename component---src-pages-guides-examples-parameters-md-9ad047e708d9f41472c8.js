"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[229],{52601:function(e,t,o){o.r(t),o.d(t,{_frontmatter:function(){return s},default:function(){return u}});var n=o(87462),a=o(63366),r=(o(15007),o(64983)),p=o(91515),i=["components"],s={},m={_frontmatter:s},d=p.Z;function u(e){var t=e.components,o=(0,a.Z)(e,i);return(0,r.mdx)(d,(0,n.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"parameter-controled-by-a-function"},"Parameter controled by a function"),(0,r.mdx)("h2",{id:"this-sample-shows-how-to-setup-a-parameter-that-is-controled-by-a-function-on-a-uniform-node-in-a-substance-compositing-graph"},"This sample shows how to setup a parameter that is controled by a function on a uniform node in a Substance Compositing graph."),(0,r.mdx)("p",null,"To use this example:"),(0,r.mdx)("blockquote",null,(0,r.mdx)("ol",{parentName:"blockquote"},(0,r.mdx)("li",{parentName:"ol"},"Open Designer"),(0,r.mdx)("li",{parentName:"ol"},"Go to Windows > Python Editor"),(0,r.mdx)("li",{parentName:"ol"},"Copy the code below inside the editor"),(0,r.mdx)("li",{parentName:"ol"},"Press the Play button"))),(0,r.mdx)("hr",null),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-python"},"import os\nimport sd\nfrom sd.tools import io\nfrom sd.ui.graphgrid import *\nfrom sd.api.sbs.sdsbscompgraph import *\nfrom sd.api.sdbasetypes import *\nfrom sd.api.sdvaluefloat4 import *\n\ndef main(aSDContext):\n     cGridSize = GraphGrid.sGetFirstLevelSize()\n    sbsPackageName = \"MySample\"\n\n    # =========================================================================\n    # Create a new Package\n    sdPackageMgr = aSDContext.getSDApplication().getPackageMgr()\n    sdPackage = sdPackageMgr.newUserPackage()\n\n    # =========================================================================\n    # Create a new Substance Compositing Graph in this package\n    sdSBSCompGraph = SDSBSCompGraph.sNew(sdPackage)\n\n    #   - Set the graph identifier\n    sdSBSCompGraph.setIdentifier(sbsPackageName)\n\n    # =========================================================================\n    # Create a uniform color node\n    sdSBSCompNodeUniform = sdSBSCompGraph.newNode('sbs::compositing::uniform')\n    sdSBSCompNodeUniform.setPosition(float2(-2*cGridSize, cGridSize))\n\n    #   - Get the input property that controls the output color\n    uniformNodePropertyOutputColor = sdSBSCompNodeUniform.getPropertyFromId('outputcolor', SDPropertyCategory.Input)\n\n    #   - Create a new property graph of type SDSBSFunctionGraph\n    propertySBSFunctionGraph = sdSBSCompNodeUniform.newPropertyGraph(uniformNodePropertyOutputColor, 'SDSBSFunctionGraph')\n\n    #   - Fill the property function. Here create a simple constant node that will return a green value\n    float4ConstantNode = propertySBSFunctionGraph.newNode('sbs::function::const_float4')\n    float4ConstantNode.setInputPropertyValueFromId('__constant__', SDValueFloat4.sNew(float4(0, 1, 0, 1)))\n\n    # Set the constant node as output of the property's SBSFunctionGraph\n    propertySBSFunctionGraph.setOutputNode(float4ConstantNode, True)\n\nif __name__ == '__main__':\n    main(sd.getContext())\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guides-examples-parameters-md-9ad047e708d9f41472c8.js.map